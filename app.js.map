{"version":3,"file":"app.js","mappings":"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","sources":["webpack://ahj-files/./src/js/List.js","webpack://ahj-files/./src/js/app.js","webpack://ahj-files/./src/js/DnD.js"],"sourcesContent":["export default class List {\n  constructor(parentEl) {\n    this.parentEl = parentEl;\n  }\n\n  static listMarkup(listName, localStorageKey) {\n    return `\n        <div class=\"list-wrapper\">\n          <div class=\"list\">\n            <div class=\"list-header\">\n              <h2 class=\"list-header-name\">${listName}</h2>\n            </div>\n            <div class=\"list-cards\" data-key=\"${localStorageKey}\">\n              <!-- раскрытое меню -->\n              <div class=\"card-composer hide\">\n                <div class=\"card-composer list-card\">\n                  <div class=\"card-composer list-card-details\">\n                    <textarea class=\"card-composer-textarea hover\" placeholder=\"Ввести заголовок для этой карточки\"></textarea>\n                  </div>\n                </div>\n                <div class=\"controls\">\n                  <div class=\"controls-section\">\n                    <input class=\"new-card-button hover\" type=\"button\" value=\"Добавить карточку\">\n                    <button class=\"icon-close hover\" type=\"button\"></button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <!-- закрытое меню -->\n            <div class=\"card-composer-container\">\n              <a class=\"open-card-composer hover\">\n                <span class=\"icon-add\"></span>\n                <span class=\"add-a-card\">Добавить карточку</span>\n              </a>\n            </div>\n          </div>\n        </div>\n    `;\n  }\n\n  static cardMarkup(title) {\n    if (title !== '') {\n      return `\n        <a class=\"list-card hover\" href=\"#\">\n          <div class=\"list-card-details\">\n            <span class=\"list-card-title\">\n              ${title}\n            </span>\n          </div>\n          <div class=\"list-card-remover hover\"></div>\n        </a>\n      `;\n    }\n\n    return '';\n  }\n\n  bindToDOM() {\n    const { listName, localStorageKey } = this.parentEl.dataset;\n    this.parentEl.innerHTML = this.constructor.listMarkup(\n      listName,\n      localStorageKey\n    );\n\n    const data = localStorage.getItem(localStorageKey);\n    const composer = this.parentEl.querySelector('.card-composer');\n\n    this.constructor.init(data, composer, this.constructor.cardMarkup);\n\n    const opener = this.parentEl.querySelector('.card-composer-container');\n\n    const textarea = this.parentEl.querySelector('.card-composer-textarea');\n\n    opener.addEventListener('click', () =>\n      this.constructor.openCardComposer(opener, composer, textarea)\n    );\n\n    const closer = this.parentEl.querySelector('.icon-close');\n\n    closer.addEventListener('click', () =>\n      this.constructor.closeCardComposer(opener, composer)\n    );\n\n    composer.addEventListener('click', () =>\n      this.constructor.focusOnCardComposer(composer)\n    );\n\n    const addBtn = this.parentEl.querySelector('.new-card-button');\n\n    const cardsList = this.parentEl.querySelector('.list-cards');\n\n    addBtn.addEventListener('click', () =>\n      this.constructor.addNewCard(\n        cardsList,\n        composer,\n        this.constructor.cardMarkup(textarea.value)\n      )\n    );\n\n    cardsList.addEventListener('click', (event) =>\n      this.constructor.deleteCard(\n        cardsList,\n        event,\n        '.list-card',\n        '.list-card-remover'\n      )\n    );\n  }\n\n  static init(data, composer, getMarkup) {\n    if (data) {\n      let html = '';\n\n      const cardsTitles = data.split('\\n');\n      cardsTitles.forEach((cardTitle) => {\n        html += getMarkup(cardTitle);\n      });\n\n      composer.insertAdjacentHTML('beforebegin', html);\n    }\n  }\n\n  static openCardComposer(opener, composer, textarea) {\n    opener.classList.add('hide');\n    composer.classList.remove('hide');\n    textarea.focus();\n  }\n\n  static closeCardComposer(opener, composer) {\n    opener.classList.remove('hide');\n    composer.classList.add('hide');\n  }\n\n  static focusOnCardComposer(composer) {\n    const textarea = composer.querySelector('textarea');\n    textarea.focus();\n  }\n\n  static addNewCard(cardsList, composer, markup) {\n    const textarea = composer.querySelector('textarea');\n    if (markup !== '') {\n      composer.insertAdjacentHTML('beforebegin', markup);\n      localStorage.setItem(cardsList.dataset.key, cardsList.innerText);\n      textarea.value = '';\n    } else {\n      textarea.focus();\n    }\n  }\n\n  static deleteCard(cardsList, event, cardSelector, cardRemoverSelector) {\n    const { target } = event;\n\n    if (target.className.includes(cardRemoverSelector.slice(1))) {\n      target.closest(cardSelector).remove();\n\n      if (cardsList.children.length > 1) {\n        localStorage.setItem(cardsList.dataset.key, cardsList.innerText);\n      } else {\n        localStorage.removeItem(cardsList.dataset.key);\n      }\n    }\n  }\n}\n","import List from './List';\nimport DnD from './DnD';\n\nconst containers = document.querySelectorAll('.list-container');\n\ncontainers.forEach((container) => {\n  const list = new List(container);\n  list.bindToDOM();\n});\n\nconst board = document.querySelector('.board');\nconst hoverElements = document.querySelectorAll('.hover');\nconst cardsVerticalDistance = 8;\nconst dragAndDrop = new DnD(board, hoverElements, cardsVerticalDistance);\n\ndragAndDrop.handleMousedown();\ndragAndDrop.handleMousemove();\ndragAndDrop.handleMouseleave();\ndragAndDrop.handleMouseup();\n\n// при нажатии Enter добавим карточку, закроем меню и очистим поле ввода\ndocument.addEventListener('keyup', (event) => {\n  if (event.key === 'Enter') {\n    const cardsList = document.activeElement.closest('.list-cards');\n    const addBtn = cardsList.querySelector('.new-card-button');\n    const closeBtn = addBtn.nextElementSibling;\n    addBtn.click();\n    closeBtn.click();\n    document.activeElement.value = '';\n  }\n});\n","export default class DnD {\n  constructor(board, hoverElements, cardsVerticalDistance) {\n    this.board = board;\n    this.hoverElements = hoverElements;\n    this.cardsVerticalDistance = cardsVerticalDistance;\n    this.draggedEl = null;\n    this.ghostEl = null;\n    this.template = null;\n    this.origin = {};\n  }\n\n  toggleGrabbing() {\n    document.body.parentElement.classList.toggle('grabbing');\n    this.hoverElements.forEach((element) => {\n      element.classList.toggle('hover');\n    });\n  }\n\n  insertElement(event, closest, element) {\n    const card = closest.closest('.list-card');\n    let list;\n    if (!card) {\n      list = closest;\n      let upCard = document.elementFromPoint(\n        event.clientX,\n        event.clientY - this.cardsVerticalDistance\n      );\n      let downCard = document.elementFromPoint(\n        event.clientX,\n        event.clientY + this.cardsVerticalDistance\n      );\n      if (upCard.className.startsWith('list-card')) {\n        upCard = upCard.closest('.list-card');\n        if (upCard) {\n          list.insertBefore(element, upCard.nextElementSibling);\n        }\n      } else if (downCard.className.startsWith('list-card')) {\n        downCard = downCard.closest('.list-card');\n        if (downCard) {\n          list.insertBefore(element, downCard);\n        }\n      } else {\n        list.insertAdjacentElement('afterbegin', element);\n      }\n    } else {\n      list = card.closest('.list-cards');\n      const { top } = card.getBoundingClientRect();\n\n      if (event.pageY > window.scrollY + top + card.offsetHeight / 2) {\n        list.insertBefore(element, card.nextElementSibling);\n      } else {\n        list.insertBefore(element, card);\n      }\n    }\n  }\n\n  getCardBack() {\n    const target = this.origin.sibling;\n    target.insertAdjacentElement(this.origin.position, this.draggedEl);\n  }\n\n  handleMousedown() {\n    this.board.addEventListener('mousedown', (event) => {\n      event.preventDefault();\n\n      // если карточки под курсором нет, выходим\n      const card = event.target.closest('.list-card');\n      if (\n        !card ||\n        event.target.classList.contains('list-card-remover') ||\n        event.target.className.startsWith('card-composer')\n      ) {\n        return;\n      }\n\n      // запоминаем исходное расположение карточки и курсора\n      if (\n        card.nextElementSibling &&\n        card.nextElementSibling.classList.contains('list-card')\n      ) {\n        this.origin.position = 'beforebegin';\n        this.origin.sibling = card.nextElementSibling;\n      } else if (\n        card.previousElementSibling &&\n        card.previousElementSibling.classList.contains('list-card')\n      ) {\n        this.origin.position = 'afterend';\n        this.origin.sibling = card.previousElementSibling;\n      } else {\n        this.origin.position = 'afterbegin';\n        this.origin.sibling = card.closest('.list-cards');\n      }\n      this.origin.shiftX = event.clientX - card.getBoundingClientRect().left;\n      this.origin.shiftY = event.clientY - card.getBoundingClientRect().top;\n      this.origin.left = event.pageX - this.origin.shiftX;\n      this.origin.top = event.pageY - this.origin.shiftY;\n\n      // запоминаем исходную карточку\n      this.draggedEl = card;\n\n      // создаём \"летающую\" карточку\n      this.ghostEl = card.cloneNode(true);\n      this.ghostEl.classList.add('dragged');\n      document.body.appendChild(this.ghostEl);\n      this.ghostEl.style.left = `${this.origin.left}px`;\n      this.ghostEl.style.top = `${this.origin.top}px`;\n\n      // создаём \"тень\" летающей карточки на месте исходной\n      this.template = card.cloneNode(true);\n      this.template.style.backgroundColor = '#e2e4ea';\n      this.template.style.boxShadow = 'none';\n      this.template.lastElementChild.style.display = 'none';\n      this.template.style.cursor = 'grabbing';\n      const title = this.template.querySelector('.list-card-title');\n      title.style.color = '#e2e4ea';\n      card.replaceWith(this.template);\n\n      // отключаем hover эффекты и активируем курсор \"grabbing\"\n      this.toggleGrabbing();\n    });\n  }\n\n  handleMousemove() {\n    this.board.addEventListener('mousemove', (event) => {\n      event.preventDefault();\n\n      // если карточка не схвачена, выходим\n      if (!this.draggedEl) {\n        return;\n      }\n\n      // поворачиваем \"летающую\" карточку\n      this.ghostEl.classList.add('transformed');\n\n      // удаляем \"тень\" из предыдущего положения\n      this.template.remove();\n\n      // вставляем \"тень\", если есть доступное место\n      const closest = document.elementFromPoint(event.clientX, event.clientY);\n      if (closest.className.startsWith('list-card')) {\n        this.insertElement(event, closest, this.template);\n      }\n\n      // обновляем координаты \"летающей\" карточки\n      this.ghostEl.style.left = `${event.pageX - this.origin.shiftX}px`;\n      this.ghostEl.style.top = `${event.pageY - this.origin.shiftY}px`;\n    });\n  }\n\n  handleMouseleave() {\n    this.board.addEventListener('mouseleave', () => {\n      // если карточка не схвачена, выходим\n      if (!this.draggedEl) {\n        return;\n      }\n\n      // удаляем \"тень\"\n      this.template.remove();\n\n      // возвращаем карточку туда, откуда она была взята\n      this.getCardBack();\n\n      // удаляем \"летающую\" карточку\n      document.body.removeChild(this.ghostEl);\n\n      // включаем hover эффекты и деактивируем курсор \"grabbing\"\n      this.toggleGrabbing();\n\n      // очищаем исходные данные\n      this.ghostEl = null;\n      this.draggedEl = null;\n      this.template = null;\n      this.origin = {};\n    });\n  }\n\n  handleMouseup() {\n    this.board.addEventListener('mouseup', (event) => {\n      // если карточка не схвачена, выходим\n      if (!this.draggedEl) {\n        return;\n      }\n\n      // удаляем \"тень\"\n      this.template.remove();\n\n      const closest = document.elementFromPoint(event.clientX, event.clientY);\n      if (\n        Math.trunc(this.origin.left) ===\n          parseInt(this.ghostEl.style.left, 10) &&\n        Math.trunc(this.origin.top) === parseInt(this.ghostEl.style.top, 10)\n      ) {\n        // если карточка в исходном положении, то вернём её обратно\n        const target = this.origin.sibling;\n        target.insertAdjacentElement(this.origin.position, this.draggedEl);\n      } else if (closest.className.startsWith('list-card')) {\n        // если карточка была перемещена в новую позицию, то вставим в новую\n        this.insertElement(event, closest, this.draggedEl);\n        // обновим LocalStorage у старого списка\n        const originalCardsList = this.origin.sibling.closest('.list-cards');\n        localStorage.setItem(\n          originalCardsList.dataset.key,\n          originalCardsList.innerText\n        );\n        const newCardsList = closest.closest('.list-cards');\n        if (originalCardsList !== newCardsList) {\n          // если карточка не в старом списке, то обновим LocalStorage нового\n          localStorage.setItem(\n            newCardsList.dataset.key,\n            newCardsList.innerText\n          );\n        }\n      } else {\n        // иначе возвращаем карточку туда, откуда она была взята\n        this.getCardBack();\n      }\n\n      // удаляем \"летающую\" карточку\n      document.body.removeChild(this.ghostEl);\n\n      // очищаем исходные данные\n      this.ghostEl = null;\n      this.draggedEl = null;\n      this.template = null;\n      this.origin = {};\n\n      // включаем hover эффекты и деактивируем курсор \"grabbing\"\n      this.toggleGrabbing();\n    });\n  }\n}\n"],"names":["List","constructor","parentEl","this","listMarkup","listName","localStorageKey","cardMarkup","title","bindToDOM","dataset","innerHTML","data","localStorage","getItem","composer","querySelector","init","opener","textarea","addEventListener","openCardComposer","closeCardComposer","focusOnCardComposer","addBtn","cardsList","addNewCard","value","event","deleteCard","getMarkup","html","split","forEach","cardTitle","insertAdjacentHTML","classList","add","remove","focus","markup","setItem","key","innerText","cardSelector","cardRemoverSelector","target","className","includes","slice","closest","children","length","removeItem","document","querySelectorAll","container","board","hoverElements","dragAndDrop","cardsVerticalDistance","draggedEl","ghostEl","template","origin","toggleGrabbing","body","parentElement","toggle","element","insertElement","card","list","top","getBoundingClientRect","pageY","window","scrollY","offsetHeight","insertBefore","nextElementSibling","upCard","elementFromPoint","clientX","clientY","downCard","startsWith","insertAdjacentElement","getCardBack","sibling","position","handleMousedown","preventDefault","contains","previousElementSibling","shiftX","left","shiftY","pageX","cloneNode","appendChild","style","backgroundColor","boxShadow","lastElementChild","display","cursor","color","replaceWith","handleMousemove","handleMouseleave","removeChild","handleMouseup","Math","trunc","parseInt","originalCardsList","newCardsList","activeElement","closeBtn","click"],"sourceRoot":""}